
buildscript {
	repositories {
		jcenter()
	}
	/*
	dependencies {
		classpath "com.eriwen:gradle-js-plugin:1.12.1"
	}
	*/
}

//apply plugin: "com.eriwen.gradle.js"
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
 
// JAVA Version
sourceCompatibility = 1.8
version = '1.0'
 
// 메이븐 Central 저장소 사용
repositories {
    mavenCentral()
}

war {
	archiveName 'ROOT.war'
}
 
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java','src/main/lib','src/main/doc','src/main/sys' ]
		}
	}
	entity {
		java {
			srcDirs=['src/main/java','src/main/doc','src/main/sys']
		}
	}
	generated {
		java {
			srcDirs = ['src/main/generated-sources/java']		
		}
	}
}

// dependency 버전 정보
def version = [
	spring: '4.2.5.RELEASE',
	springSecurity: '4.1.0.RELEASE',
	aspectj: '1.6.10',
	slf4j: '1.7.7',
	querydsl : '4.0.9',
	fasterxml: '2.7.3',
	jstl:'1.2',
	servletApi: '3.1.0',
	mockito: '1.9.0',
	junit: '4.11'
]
//, jstl: '1.2'
//, slf4j: '1.7.6'
//, mockito: '1.9.0'
//, cglib: '2.2.2'
//, logback: '1.0.6'

// In this section you declare the dependencies for your production and test code
// 의존성 설정
dependencies {
	compile "org.springframework:spring-core:${version.spring}",
    		"org.springframework:spring-web:${version.spring}",
    		"org.springframework:spring-webmvc:${version.spring}",
    		"org.springframework:spring-jdbc:${version.spring}",
    		"org.springframework:spring-context:${version.spring}",
    		"org.springframework:spring-context-support:${version.spring}",
    		"org.springframework:spring-aop:${version.spring}",
    		"org.springframework:spring-tx:${version.spring}",
    		"org.springframework:spring-orm:${version.spring}",
    		"org.springframework.data:spring-data-jpa:1.10.1.RELEASE",
    		"org.springframework:spring-orm:${version.spring}",
	  		"org.springframework.security:spring-security-web:${version.springSecurity}",
	  		"org.springframework.security:spring-security-config:${version.springSecurity}",
	  		"org.springframework.security:spring-security-taglibs:${version.springSecurity}",
			"commons-beanutils:commons-beanutils-core:1.8.3",
			"org.aspectj:aspectjtools:1.6.2",
    		"com.querydsl:querydsl-jpa:${version.querydsl}",
    		"org.hibernate:hibernate-entitymanager:5.1.0.Final",
		    "org.hibernate:hibernate-validator:5.2.4.Final",
		   	"joda-time:joda-time:1.6",
			"com.fasterxml.jackson.core:jackson-core:${version.fasterxml}",
			"com.fasterxml.jackson.core:jackson-databind:${version.fasterxml}",
			"com.google.guava:guava:13.0.1",
			"org.aspectj:aspectjrt:${version.aspectj}",
			"org.slf4j:slf4j-api:${version.slf4j}",
			"javax.inject:javax.inject:1",
			"com.navercorp.lucy:lucy-xss-servlet:2.0.0",
			"commons-fileupload:commons-fileupload:1.2.1",
			"commons-io:commons-io:2.4",
			"org.mariadb.jdbc:mariadb-java-client:1.1.7",
			"commons-dbcp:commons-dbcp:1.4",
			'taglibs:standard:1.1.2',
			'javax.servlet.jsp.jstl:jstl-api:1.2',
			'com.googlecode.libphonenumber:libphonenumber:7.3.2',
			'com.hazelcast:hazelcast:3.5.2'
			
	providedCompile "javax.servlet:javax.servlet-api:${version.servletApi}",
			"com.querydsl:querydsl-apt:${version.querydsl}",
			"javax.servlet.jsp:jsp-api:2.2",
			"com.mysema.maven:apt-maven-plugin:1.1.3"
			
	testCompile "org.springframework:spring-test:${version.spring}",
			"junit:junit:${version.junit}",
			"org.mockito:mockito-core:${version.mockito}"
	
	runtime 	"org.slf4j:jcl-over-slf4j:${version.slf4j}",
			"org.slf4j:slf4j-log4j12:${version.slf4j}",
			"log4j:log4j:1.2.15"
}
 
// logback(slf4j)를 사용하기 때문에 모든 의존성에서 commons-logging는 제외
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')
 
// JAVA 컴파일시 인코딩 설정
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

task printJavaFolder << {
	sourceSets {
		main{
			println "java.srcDirs = ${java.srcDirs}"
		}
	}
} 

task generateQueryDSL(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL query types') {
    source = sourceSets.main.java.srcDirs
    classpath = configurations.compile + configurations.providedCompile 
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.querydsl.apt.QuerydslAnnotationProcessor"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

compileJava {
     dependsOn generateQueryDSL
     source generateQueryDSL.destinationDir
}

compileGeneratedJava {
     dependsOn generateQueryDSL
     options.warnings = false
     classpath += sourceSets.main.runtimeClasspath
}

////javaScript 압축
/* 
javascript.source {
    prod {
        js {
            srcDir 'src/main/webapp/resources/js/ui'
            include "*.js"
        }
    }
}

combineJs {
    //encoding = "UTF-8"
    source = javascript.source.prod.js.files
    dest = file("src/main/webapp/resources/js/scripts.js")
}

minifyJs {
    source = combineJs
    dest = file('src/main/webapp/resources/js/scripts.min.js')
  //  sourceMap = file("${buildDir}/all.sourcemap.json")
    closure {
    	compilationLevel = 'WHITESPACE_ONLY'
        warningLevel = 'QUIET'
    }
}
*/
 
// TEST 설정
test {
	exclude('*')
    jvmArgs = ['-ea', '-Xmx256m']
    logging.captureStandardOutput(LogLevel.INFO)
    //testReport = false
    reports.html.enabled = false
}
